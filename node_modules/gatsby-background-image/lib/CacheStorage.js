"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getData = getData;
exports.setData = setData;
exports.getCachedData = getCachedData;
exports.deleteOldCaches = deleteOldCaches;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _SimpleUtils = require("./SimpleUtils");

var CACHE_VERSION = 1;
var CACHE_NAME = "myapp-" + CACHE_VERSION;

function getData(url) {
  var cachedData;
  return _regenerator.default.async(function getData$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!((0, _SimpleUtils.isBrowser)() && window.caches)) {
            _context.next = 9;
            break;
          }

          _context.next = 3;
          return _regenerator.default.awrap(getCachedData(url));

        case 3:
          cachedData = _context.sent;

          if (!cachedData) {
            _context.next = 7;
            break;
          }

          console.log('Retrieved cached data');
          return _context.abrupt("return", cachedData);

        case 7:
          console.log('Fetching fresh data');
          return _context.abrupt("return", cachedData);

        case 9:
          return _context.abrupt("return", false);

        case 10:
        case "end":
          return _context.stop();
      }
    }
  });
}

function setData(url) {
  var cacheStorage, cachedData;
  return _regenerator.default.async(function setData$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!((0, _SimpleUtils.isBrowser)() && window.caches)) {
            _context2.next = 12;
            break;
          }

          _context2.next = 3;
          return _regenerator.default.awrap(caches.open(CACHE_NAME));

        case 3:
          cacheStorage = _context2.sent;
          _context2.next = 6;
          return _regenerator.default.awrap(cacheStorage.add(url));

        case 6:
          _context2.next = 8;
          return _regenerator.default.awrap(getCachedData(url));

        case 8:
          cachedData = _context2.sent;
          _context2.next = 11;
          return _regenerator.default.awrap(deleteOldCaches());

        case 11:
          return _context2.abrupt("return", cachedData);

        case 12:
          return _context2.abrupt("return", false);

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function getCachedData(url) {
  var cacheStorage, cachedResponse;
  return _regenerator.default.async(function getCachedData$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!((0, _SimpleUtils.isBrowser)() && window.caches)) {
            _context3.next = 11;
            break;
          }

          _context3.next = 3;
          return _regenerator.default.awrap(caches.open(CACHE_NAME));

        case 3:
          cacheStorage = _context3.sent;
          _context3.next = 6;
          return _regenerator.default.awrap(cacheStorage.match(url));

        case 6:
          cachedResponse = _context3.sent;
          console.log('cr', cachedResponse);

          if (!(!cachedResponse || !cachedResponse.ok)) {
            _context3.next = 10;
            break;
          }

          return _context3.abrupt("return", false);

        case 10:
          return _context3.abrupt("return", cachedResponse.url ? cachedResponse.url : false);

        case 11:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function deleteOldCaches() {
  return _regenerator.default.async(function deleteOldCaches$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (!((0, _SimpleUtils.isBrowser)() && window.caches)) {
            _context4.next = 3;
            break;
          }

          _context4.next = 3;
          return _regenerator.default.awrap(caches.delete(CACHE_NAME));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
}